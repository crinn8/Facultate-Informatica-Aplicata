10 7 9 24 25 31 14 44 17 0 8 12 11

32 21 47 15 27 40 53 0 17 25 30 38 45 50 54 23 26 29

30 20 45 10 26 37 57 7 12 27 35 39 51 58 1 9 17

(z != radacina) && (z->color != 'n') && 

/** C++ implementation for 
   Red-Black Tree Insertion
   This code is adopted from 
   the code provided by
   Dinesh Khandelwal in comments **/
#include <bits/stdc++.h>
using namespace std;
  
enum Color {RED, BLACK};
  
struct Node
{
    int data;
    bool color;
    Node *left, *right, *parent;
  
    // Constructor
    Node(int data)
    {
       this->data = data;
       left = right = parent = NULL;
       this->color = RED;
    }
};
  
// Class to represent Red-Black Tree
class RBTree
{
private:
    Node *root;
protected:
    void rotateLeft(Node *&, Node *&);
    void rotateRight(Node *&, Node *&);
    void fixViolation(Node *&, Node *&);
public:
    // Constructor
    RBTree() { root = NULL; }
    void insert(const int &n);
    void inorder();
    void levelOrder();
};
  
// A recursive function to do inorder traversal
void inorderHelper(Node *root)
{
    if (root == NULL)
        return;
  
    inorderHelper(root->left);
    cout << root->data << "  ";
    inorderHelper(root->right);
}
  
/* A utility function to insert 
    a new node with given key
   in BST */
Node* BSTInsert(Node* root, Node *pt)
{
    /* If the tree is empty, return a new node */
    if (root == NULL)
       return pt;
  
    /* Otherwise, recur down the tree */
    if (pt->data < root->data)
    {
        root->left  = BSTInsert(root->left, pt);
        root->left->parent = root;
    }
    else if (pt->data > root->data)
    {
        root->right = BSTInsert(root->right, pt);
        root->right->parent = root;
    }
  
    /* return the (unchanged) node pointer */
    return root;
}
  
// Utility function to do level order traversal
void levelOrderHelper(Node *root)
{
    if (root == NULL)
        return;
  
    std::queue<Node *> q;
    q.push(root);
  
    while (!q.empty())
    {
        Node *temp = q.front();
        cout << temp->data << "  ";
        q.pop();
  
        if (temp->left != NULL)
            q.push(temp->left);
  
        if (temp->right != NULL)
            q.push(temp->right);
    }
}
  
void RBTree::rotateLeft(Node *&root, Node *&y)
{
     Node* x;
        x = y->right;
        y->right = x->left; 
        if (x->right != NULL)
        {
            x->right->parent = y;
        }
        x->parent = y->parent;
        if (y->parent == NULL)
        {
            root = x;
        }
        else if (y == y->parent->left)
            {
                y->parent->left = x;
            }
            else
            {
                y->parent->right = x;
            }
        x->left = y;
        y->parent = x;
}
  
void RBTree::rotateRight(Node *&root, Node *&y)
{
    Node* x;
        x = y->left;
        y->left = x->right; 
        if (x->left != NULL)
        {
            x->left->parent = y;
        }
        x->parent = y->parent;
        if (y->parent == NULL)
        {
            root = x;
        }
        else if (y == y->parent->right)
            {
                y->parent->right = x;
            }
            else
            {
                y->parent->left = x;
            }
        x->right = y;
        y->parent = x;
}
  
// This function fixes violations 
// caused by BST insertion
void RBTree::fixViolation(Node *&root, Node *&z)
{
    while (z->parent->color == RED)
        {
            if (z->parent == z->parent->parent->left)
            {
                Node* U;
                U = z->parent->parent->right;
                if (U->color == 'r')
                {
                    z->parent->color = BLACK;
                    U->color = BLACK;
                    z->parent->parent->color = RED;
                    z = z->parent->parent;
                }
                else
                {
                    if (z== z->parent->right)
                    {
                        rotateLeft(root,z);
                        z = z->parent;
                    }
                    rotateRight(root,z);
                    z->parent->color = BLACK;
                    z->parent->parent->color = RED;
                }
            }
            else 
                if (z->parent == z->parent->parent->right)
                {
                    Node* U;
                    U = z->parent->parent->left;
                    if (U->color == RED)
                    {
                        z->parent->color = BLACK;
                        U->color = BLACK;
                        z->parent->parent->color = RED;
                        z = z->parent->parent;
                    }
                    else
                    {
                        if (z == z->parent->left)
                        {
                            rotateRight(root,z);
                            z = z->parent;
                        }
                       rotateLeft(root,z);
                        z->parent->color = BLACK;
                        z->parent->parent->color = RED;
                    }
                }
        }
  
    root->color = BLACK;
}
  
// Function to insert a new node with given data
void RBTree::insert(const int &data)
{
    Node *pt = new Node(data);
  
    // Do a normal BST insert
    root = BSTInsert(root, pt);
  
    // fix Red Black Tree violations
    fixViolation(root, pt);
}
  
// Function to do inorder and level order traversals
void RBTree::inorder()     {  inorderHelper(root);}
void RBTree::levelOrder()  {  levelOrderHelper(root); }
  
// Driver Code
int main()
{
    RBTree tree;
  
    tree.insert(7);
    tree.insert(6);
    tree.insert(5);
    tree.insert(4);
    tree.insert(3);
    tree.insert(2);
    tree.insert(1);
  
    cout << "Inoder Traversal of Created Tree\n";
    tree.inorder();
  
    cout << "\n\nLevel Order Traversal of Created Tree\n";
    tree.levelOrder();
  
    return 0;
}